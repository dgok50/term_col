#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <curl/curl.h>

struct string {
  char *ptr;
  size_t len;
};

struct usred {
    double **data; //Указатель на массив текущих данных
    double *data_usred; //Указатель на массив усреднённых данных
    unsigned long data_usred_col; //Количество переменных для усреднения
    unsigned long data_col; //Количество переменных для текущих данных
    unsigned long data_index; //Индекс массива текущих данных
    int data_redy;
    //unsigned seconds_to_usred=0; //Временной интервал для усреднения
    //unsigned old_sec = 0;
};


int init_usred( struct usred *sred, unsigned long usred_ciclas, unsigned long args) {
    unsigned long tmp_ind=0;
    sred->data_usred_col=args;
    sred->data_col = usred_ciclas;
    sred->data_index = 0;
    sred->data_redy=0;
    sred->data_usred = malloc((sred->data_usred_col+1)*sizeof(double));
    sred->data = malloc((sred->data_col+1)*sizeof(double *));
    unsigned long i, j;
    for(i = 0; i<(sred->data_col); i++)
	sred->data[i] = malloc((sred->data_usred_col+1)*sizeof(double));
    
    for(i = 0; i<(sred->data_usred_col);i++) {
	for(j = 0; j<(sred->data_col);j++) {
	    sred->data[j][i]= 0;
	}
	sred->data_usred[i]=0;
    }
}
int write_usred( struct usred *sred, int args, ...) {
    unsigned long i, tmp_col = 0;
    if(args > sred->data_usred_col)
	return 1;
    va_list ap;
    
    va_start(ap, args);
    /*if(sred->data_usred_col < tmp_col+1) {
	syslog(LOG_NOTICE, "[usred]allocate addtional memory... cell:%u", tmp_col);
	realloc(sred->data_usred, (tmp_col+1)*sizeof(double));
	for(i = 0; i<(sred->data_col); i++) {
	    realloc(sred->data[i], (tmp_col+1)*sizeof(double));
	    if (sred->data[i] == NULL) {
		fprintf(stderr, "realloc() failed\n");
		exit(EXIT_FAILURE); 
	    }
	}
	sred->data_usred_col = tmp_col;
    }*/
    for(i = 0; i<args; i++) {
	double *data_ptr = va_arg(ap, double *);
	sred->data[sred->data_index][i]=*data_ptr;
	if(sred->data_redy == 1)
	    *data_ptr = sred->data_usred[i];
	//syslog(LOG_NOTICE, "[usred]parsed cell:%u, cont:%f, args:%d", i, sred->data[sred->data_index][i], args);
    }
    //tmp_col++;
    va_end(ap);

    unsigned long j;
    double tmp;
    for(i = 0; i<(sred->data_usred_col);i++) {
	tmp=0;
	for(j = 0; j<(sred->data_col);j++) {
	    tmp += sred->data[j][i];
	}
	sred->data_usred[i]=tmp/sred->data_col;
	//syslog(LOG_NOTICE, "[usred]usred cell:%u, cont:%f, data_index: %u", i, sred->data_usred[i], sred->data_index);
    }
    sred->data_index++;
    if((sred->data_index+1) > sred->data_col) {
	sred->data_index=0;
	sred->data_redy=1; }
    //if()
}

void free_usred(struct usred *sred) {
    free(sred->data_usred);
    unsigned long i;
    for(i = 0; i<(sred->data_col); i++) {
	free(sred->data[i]);
    }
    free(sred->data);
}

void init_string(struct string *s) {
  s->len = 0;
  s->ptr = malloc(s->len+1);
  if (s->ptr == NULL) {
    fprintf(stderr, "malloc() failed\n");
    exit(EXIT_FAILURE);
  }
  s->ptr[0] = '\0';
}

size_t writefunc(void *ptr, size_t size, size_t nmemb, struct string *s)
{
  size_t new_len = s->len + size*nmemb;
  s->ptr = realloc(s->ptr, new_len+1);
  if (s->ptr == NULL) {
    fprintf(stderr, "realloc() failed\n");
    exit(EXIT_FAILURE);
  }
  memcpy(s->ptr+s->len, ptr, size*nmemb);
  s->ptr[new_len] = '\0';
  s->len = new_len;

  return size*nmemb;
}

int get_ups_data(double *vin, double *load, double *frqin, double *upsbat) {

  CURL *curl;
  CURLcode res;
  //return 1;
  curl = curl_easy_init();
  if(curl) {
    struct string s;
    init_string(&s);

    curl_easy_setopt(curl, CURLOPT_URL, "http://192.168.0.114:8000/ups.txt");
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writefunc);
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &s);
    res = curl_easy_perform(curl);
    int n = 0;
    char *pch = s.ptr, *delim = "\n", *token;
    //syslog(LOG_NOTICE,"String: %s size: %d", s.ptr, s.len);
    n=0;
    double tmp;
    while(token = strtok_r(pch,"\n#", &pch)) {
        tmp = atof(token);
	//syslog(LOG_NOTICE,"Tmp: %d", tmp);
        if(n==0) { *vin = tmp+0;}
        if(n==2) { *load = tmp+0;}
        if(n==3) { *frqin = tmp+0;}
        if(n==5) { *upsbat = tmp+0;}
        n++;
    }

/*    char * pch;
    fprintf(stderr,"String: %s\n size: %d \n", s.ptr, strlen(s.ptr));
	if(strlen(s.ptr) < 20) {
		return 1;
	}
    pch = strtok(s.ptr,"\n");
    int tmp = 0;
    while(pch != NULL) {
		tmp = atoi(pch);
		if(n==0) { vin = &tmp;}
		if(n==2) { load = &tmp;}
		if(n==3) { frqin = &tmp;}
		if(n==5) { upsbat = &tmp;}
		pch = strtok(NULL, "\n");
		n++;
    }*/
	if(n<=5)
		return 1;
    //syslog(LOG_NOTICE,"vin=%fv load=%fprc frqin=%fhz upsbat=%fprc",*vin,*load,*frqin,*upsbat);
    free(s.ptr);

    /* always cleanup */
    curl_easy_cleanup(curl);
	return 0;
  }
  return 1;
}
